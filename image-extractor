#!/bin/bash

min_size=200
pagenumbers="-p"
merge=1
merge_type=webp
target="./images"
verbose=0

SCRIPT_NAME="Extract PDF Images"
VERSION=0.1

version(){
  echo "$SCRIPT_NAME v$VERSION Claus Wiingreen (C) 2022"
}

usage(){
  version
cat << EOF
Usage: 
  extract-images [OPTION]... FILE... 

Options:
  -h, --help            Display this help message
  -v, --version         Print the version info and exit
  -s, --min-imagesize   The process will remove all images smaller than this
                        value in pixels (defaults to 200)
      --no-pagenumbers  Add pagenumbers to the image files
      --no-merge        Do not automatically merge images with their mask
      --merge-type      Set the file extension for merged files (defaults to 
                        webp)
  -t, --target          Set the destination directory for all the images
                        (defaults to './images')
  -V, --verbose         Change the output to logs instead of progressbar
EOF
}

which pdfimages > /dev/null
if [ $? != 0 ]
then
  echo "Failed to locate 'pdfimages' program, are you missing 'poppler-utils'?"
  exit 1
fi
which identify > /dev/null
if [ $? != 0 ]
then
  echo "Failed to locate 'identify' program, are you missing 'imagemagick'?"
  exit 1
fi
which convert > /dev/null
if [ $? != 0 ]
then
  echo "Failed to locate 'convert' program, are you missing 'imagemagick'?"
  exit 1
fi

LONG_OPTIONS="help,version,min-imagesize:,pagenumbers,no-merge,merge-type:,target,prefix,verbose"
SHORT_OPTIONS="hvs:nt:p:V"

options=$(getopt -l $LONG_OPTIONS -o $SHORT_OPTIONS -a -- "$@")
eval set -- "$options"

while true; do
  case $1 in
    -h|--help)
      usage
      exit 0
      ;;
    -v|--version)
      version
      exit 0
      ;;
    -s|--min-imagesize)
      shift
      min_size=$1
      ;;
    --no-pagenumbers)
      pagenumbers=""
      ;;
    --no-merge)
      merge=0
      ;;
    --merge-type)
      shift
      merge_type=$1
      ;;
    -t|--target)
      shift
      target=$1
      ;;
    --)
      shift
      break
      ;;
    -V|--verbose)
      verbose=1
      ;;
    *)
      usage
      exit 1
  esac
  shift
done

PDFFILE="$1"

if [ -z "$PDFFILE" ]
then
  usage
  exit 1
fi

[ ! -d "$target" ] && mkdir "$target"

# Variant of the progress bar from https://github.com/fearside/ProgressBar/
function progress-bar {
  let _progress=(${1}*100/${2}*100)/100
  let _done=(${_progress}*4)/10
  let _left=40-$_done

  _fill=$(printf "%${_done}s")
  _left=$(printf "%${_left}s")

  printf "\rProgress: [${_fill// /â–ˆ}${_left// /-}] ${_progress}%% (${1}/${2})"
}

for file in "$@"
do
  image_root=$target/$(basename "$file" .pdf)
 
  if [ ! -f "$file" ] 
  then
    echo "File not found: $file"
    continue
  fi

  echo "Extracing images from '$file' to '$image_root' (this may take a while)..."
  pdfimages -all $pagenumbers "$file" "$image_root"
  
  image_count=$(ls "$image_root"* | wc -l)
  image_progress=0

  echo "$image_count images extracted!"

  for image in "$image_root"*
  do
    image_progress=$(( $image_progress + 1 ))
    [[ $verbose = 0 ]] && progress-bar ${image_progress} ${image_count}

    [ ! -f "$image" ] && continue
    
    width=$(identify -format "%w" "$image")
    height=$(identify -format "%h" "$image")
    if [ $width -lt $min_size ] || [ $height -lt $min_size ]
    then
      [[ $verbose = 1 ]] && echo "($image_progress/$image_count) Removing small image: \"$image\""
      rm "$image"
      continue
    fi

    [ $merge = 0 ] && continue

    image_index=$(echo "$image" | sed 's/.*-0*\([0-9]*\)\..*/\1/')
    mask_root=$(echo "$image" | sed 's/\(.*-\)[0-9]*\..*/\1/')
    mask_index=$(printf "%03d" $(( $image_index + 1 )))
    mask=$(find "${mask_root}${mask_index}"* -print -quit 2>/dev/null)
    
    [ -z "$mask" ] && continue
 
    mask_width=$(identify -format "%w" "$mask")
    mask_height=$(identify -format "%h" "$mask")
    mask_colorspace=$(identify -format "%[colorspace]" "$mask")

    if [[ $width != $mask_width ]] || [[ $height != $mask_height ]] || [[ $mask_colorspace != "Gray" ]]
    then
      continue
    fi
    
    output="${image%.*}.$merge_type"
    [[ $verbose = 1 ]] && echo "($image_progress/$image_count) Applying mask \"$mask\" to image \"$image\" and saving to \"$output\""
    convert "$image" "$mask" -alpha Off -compose CopyOpacity -composite "$output"
    [[ $image != $output ]] && rm "$image"
    rm "$mask"
  done
  echo ""
done

